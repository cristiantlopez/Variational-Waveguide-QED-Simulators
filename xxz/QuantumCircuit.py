# We load some packages

import numpy as np
from numpy import sin, cos, abs, exp, sqrt, pi
import torch
from random import random

class QuantumCircuit:
    """

    This class builds the variational circuit and the cost functions
    
    ...

    Attributes
    ----------
    qr : class
        The quantum register created using the QuantumRegister class.
    op : class
        The operations created using the Operations class.

    Methods
    -------
    ·cost_XXZ_global:
        Expectation value of the XXZ Hamiltonian in the state generated by
        the wQED-XX Ansatz.
    ·Global_XX_Circuit:
        wQED-XX Ansatz.
        
    """

    def __init__(self,qr,op):
        self.qr = qr
        self.op = op
        self.size = qr.size

    def cost_XXZ_global(self, parameters, layers, Delta, Sp_list, Sm_list, Z_list, X_Layer_even, psi0):
        '''
        Returns the expectation value of the XXZ Hamiltonian in the state generated by the wQED-XX Ansatz.

        Parameters:
        -----------
        parameters : list
            Variational parameters
        layers : int
            Number of layers
        Delta : float
            Point of the adiabatic path
        Sp_list : list
            List of \sigma_+ operators acting locally on each qubit
        Sm_list : list
            List of \sigma_- operators acting locally on each qubit
        Z_list : list
            List of \sigma_z operators acting locally on each qubit
        X_Layer_even : tensor
            Layer of X gates acting on even qubits
        psi0 : tensor
            Initial state
        '''

        psi = self.Global_XX_Circuit(layers, parameters, Sp_list, Sm_list, Z_list, X_Layer_even, psi0)

        cost = psi.H @ self.op.XXZ_Hamiltonian(Delta) @ psi
        
        return torch.real(cost[0][0])

    def Global_XX_Circuit(self, layers, parameters, Sp_list, Sm_list, Z_list, X_Layer_even, psi0):
        '''
        Returns the expectation value of the XXZ Hamiltonian in the state generated by the wQED-XX Ansatz.

        Parameters:
        -----------
        parameters : list
            Variational parameters
        layers : int
            Number of layers
        Delta : float
            Point of the adiabatic path
        Sp_list : list
            List of \sigma_+ operators acting locally on each qubit
        Sm_list : list
            List of \sigma_- operators acting locally on each qubit
        Z_list : list
            List of \sigma_z operators acting locally on each qubit
        X_Layer_even : tensor
            Layer of X gates acting on even qubits
        psi0 : tensor
            Initial state
        '''

        psi = X_Layer_even @ psi0
        for i in range(layers):
            psi = self.op.Global_XX_Layer(parameters[i], parameters[layers+i], parameters[2*layers+i], Sp_list, Sm_list, Z_list) @ psi      
        return psi
